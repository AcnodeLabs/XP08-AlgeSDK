package com.acnodelabs.algeapp

import android.content.Context.AUDIO_SERVICE
import android.content.Intent
import android.content.res.AssetFileDescriptor
import android.media.AudioManager
import android.media.MediaPlayer
import android.media.SoundPool
import android.opengl.GLSurfaceView
import android.os.Bundle
import android.view.KeyEvent
import android.view.MotionEvent
import android.view.View
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material.MaterialTheme
import androidx.compose.material.Surface
import androidx.compose.material.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import com.acnodelabs.algeapp.ui.theme.AlgeAppTheme
import java.io.FileDescriptor
import java.io.FileOutputStream
import java.io.IOException
import java.io.InputStream
import javax.microedition.khronos.egl.EGLConfig
import javax.microedition.khronos.opengles.GL10


interface CppListener {
    fun onIntegerSet(key: String, value: Int): String
    fun onStringSet(key: String, value: String)
}

var post_need : String = ""

interface ALlistener {
    fun SetTitle(chars: String?)
}

interface AccelerometerListener {
    fun onAccelerationChanged(x: Float, y: Float, z: Float)
    fun onShake(force: Float)
}


internal class DemoGLSurfaceView(da: MainActivity, al: ALlistener) :
    GLSurfaceView(da), AccelerometerListener {
    var CMD_LOG = 0x3001
    var CMD_MSG = 0x3002
    var CMD_TITLE = 0x3013
    var CMD_TEXID = 0x3205
    var CMD_BEGIN = 0x1111
    var CMD_END = 0xffff
    var CMD_SNDSET0 = 0x3040
    var CMD_SNDSET1 = 0x3041
    var CMD_SNDSET2 = 0x3042
    var CMD_SNDSET3 = 0x3043
    var CMD_SNDPLAY0 = 0x3050
    var CMD_SNDPLAY1 = 0x3051
    var CMD_SNDPLAY2 = 0x3052
    var CMD_SNDPLAY3 = 0x3053
    var CMD_TEXSET0 = 0x3230
    var CMD_TEXSET1 = 0x3231
    var CMD_TEXSET2 = 0x3232
    var CMD_TEXSET3 = 0x3233
    var CMD_ALLSET = 0x3993
    var CMD_KEYDOWN = 0x7998
    var CMD_VIDSET = 0x3007
    var CMD_VIDPLAY = 0x3008
    var CMD_TOAST = 0x3022
    var CMD_TOUCH_START = 0x3300
    var CMD_TOUCH_END = 0x3301
    var CMD_TOUCHMOVE = 0x3321
    var CMD_SCREENSIZE = 0x3993
    var dem: MainActivity
    var al: ALlistener
    private val accelX = 0f
    private val accelY = 0f
    private val accelZ = 0f
    var mSoundPool: SoundPool
    var soundid: IntArray
    var supported = false

    /**
     * Returns true if at least one Accelerometer sensor is available
     */
    fun onTimer() {
        //while (pull()!=0) {
        //FLUSHALL
        //};
        requestRender()
    }

    var puller: Puller

    inner class Puller : Runnable {
        var a: DemoGLSurfaceView? = null
        override fun run() {
            //      int doit =0;
            //  while (doit!=CMD_END) {
            //      doit = a.pull();
            //    a.requestRender();
            //}
        }
    }

    @Synchronized
    private fun Play(id: Int) {
        val audioManager = dem.getSystemService(AUDIO_SERVICE) as AudioManager
        val actualVolume = audioManager
            .getStreamVolume(AudioManager.STREAM_MUSIC).toFloat()
        val maxVolume = audioManager
            .getStreamMaxVolume(AudioManager.STREAM_MUSIC).toFloat()
        val volume = actualVolume / maxVolume
        mSoundPool.play(id, volume, volume, 1, 0, 1.0f)
    }

    override fun onShake(force: Float) {
        //dem.UserMsg( "Phone shaked : " + force);
    }

    /**
     * onAccelerationChanged callback
     */
    override fun onAccelerationChanged(x: Float, y: Float, z: Float) {
        mRenderer.SetAccel(x, y, z)
        pull()
    }

    fun SoundID(index: Int): Int {

        //if (index==1) ID = R.raw.sound0;
        //if (index==2) ID = R.raw.sound1;
        return index
    }

    fun TexID(index: Int): Int {
        //	if (index==0) ID = R.raw.acnode;
        return 0
    }

    var mp = arrayOfNulls<MediaPlayer>(16)
    var vmp: MediaPlayer? = null
    fun pull(): Int {
        val cmd = nativePull()
        if (cmd == CMD_ALLSET) {
            //	dem.UserMsg("AllSet");
            DemoRenderer.AllSet = true
        }
        if (cmd == CMD_TITLE || cmd == CMD_MSG || cmd == CMD_LOG || cmd == CMD_TOAST) {
            val title = nativeSzP1()
            try {
                if (cmd == CMD_TITLE) {
                   // dem.SetTitle(title)
                }
                //if (cmd == CMD_MSG) dem.UserMsg(this.context, title)
                if (cmd == CMD_TOAST) dem.UserToast(this.context, title)
                if (cmd == CMD_LOG) println("LOG:$title")
            } catch (e: java.lang.Exception) {
                val a = e.message
            }
        }
        if (cmd == CMD_VIDSET) {
            vmp = MediaPlayer()
            val fd: FileDescriptor
            try {
                val vfile = nativeSzP1()
                fd = dem.getAssets().openFd(vfile).getFileDescriptor()
                vmp.setDataSource(fd)
                //vmp.setDisplay(null);
                vmp!!.prepareAsync()
                //vmp.setDisplay();
            } catch (e: IOException) {
                // TODO Auto-generated catch block
                e.printStackTrace()
            }
        }
        if (cmd == CMD_VIDPLAY) {
            try {
                vmp!!.start()
                // dem.UserMsg(this.getContext(),"Movie OK");
            } catch (e: java.lang.Exception) {
                // TODO Auto-generated catch block
                e.printStackTrace()
          //      dem.UserMsg(this.context, e.message)
            }
        }
        if (cmd >= CMD_SNDSET0 && cmd <= CMD_SNDSET0 + 9) {
            val index = cmd - CMD_SNDSET0
            var error = false
            var afd: AssetFileDescriptor? = null
            val soundfile = nativeSzP1()
            try {
                afd = dem.getAssets().openFd(soundfile)
                mp[index] = MediaPlayer()
                mp[index]!!.setDataSource(afd.fileDescriptor, afd.startOffset, afd.length)
                mp[index]!!.prepareAsync()
            } catch (e: IOException) {
                // TODO Auto-generated catch block
                e.printStackTrace()
                error = true
            }
        }
        if (cmd >= CMD_SNDPLAY0 && cmd <= CMD_SNDPLAY0 + 9) {
            // Getting the user sound settings
            val index = cmd - CMD_SNDPLAY0
            if (mp[index] != null) {
                mp[index]!!.setVolume(1f, 1f)
                mp[index]!!.start()
            } else dem.UserToast(context, "Cannot SNDPLAY\nCheck Resource")
        }
        if (cmd >= CMD_TEXSET0 && cmd <= CMD_TEXSET3) {
            //((DemoRenderer) mRenderer).texSet(cmd-CMD_TEXSET0, TexID(cmd - CMD_TEXSET0));
            //nativePushI(CMD_TEXID, cmd-CMD_TEXSET0, (cmd-CMD_TEXSET0)+1);
        }
        if (cmd == CMD_END) {
            dem.finish()
        }
        return cmd
    } //~

    private fun Win32Key(code: Int): Int {
        var w = 0
        if (code >= 8 && code <= 16) w = code - 8 //1-9
        if (code >= 29 && code <= 29 + 26) w =
            code - 13 //w = 27; //A-Z, e.g L on android=40 -> win32=27
        if (code == 58) w = -10 //Rt Mapped on right Alt Key
        if (code == 57) w = -12 //Lt Mapped on left Alt Key
        if (code == 7) w = -1 //zero
        if (code == 82) w = -11 //menu = test mode
        return w
    }

    override fun onKeyDown(code: Int, event: KeyEvent): Boolean {
        pull()
        if (event.getAction() === KeyEvent.ACTION_DOWN) {
            //int code = (int)event.getKeyCode();
            nativePushI(CMD_KEYDOWN, Win32Key(code), 0)
            // nativePause();
        }
        return true
    }

    override fun onTouchEvent(event: MotionEvent): Boolean {
        pull()
        val x = event.rawX.toInt()
        val y = event.rawY.toInt()
        if (event.action == MotionEvent.ACTION_MOVE) {
            touchmoves++
            //Only send fifth move point as every call is expensive
            //if (touchmoves>=5) {
            nativePushI(CMD_TOUCHMOVE, x, y)
            touchmoves = 0
            //}
        }
        if (event.action == MotionEvent.ACTION_DOWN) nativePushI(CMD_TOUCH_START, x, y)
        if (event.action == MotionEvent.ACTION_UP) nativePushI(CMD_TOUCH_END, x, y)
        return true
    }

    var touchmoves: Int
    var mRenderer: DemoRenderer

    //.
    init {
        dem = da
        //dem.UserToast(this.getContext(),"OpenGL Linked");
        this.al = al
        mRenderer = DemoRenderer(this.context, dem, al)
        mRenderer.dgl = this
        setRenderer(mRenderer)
        //this.getContext();
        //setRenderMode(RENDERMODE_WHEN_DIRTY);
        puller = Puller()
        puller.a = this
        //queueEvent(puller);
        soundid = IntArray(16)
        mSoundPool = SoundPool(16, AudioManager.STREAM_MUSIC, 0)
        touchmoves = 0
        val display = this.resources.displayMetrics
        val width = display.widthPixels
        val height = display.heightPixels
        nativePushI(CMD_SCREENSIZE, width, height)
        nativePushI(CMD_BEGIN, 0, 0)
    }

    companion object {
        private external fun nativePause()
        private external fun nativePushI(cmd: Int, x: Int, y: Int)
        private external fun nativePull(): Int
        private external fun nativeSzP1(): String
        private external fun nativeIntP1(): Int
        private external fun nativeIntP2(): Int
    }
}

internal class DemoRenderer(context: Context, acti: BaseActivity, al: ALlistener) :
    GLSurfaceView.Renderer {
    private val con: Context
    private val acti: BaseActivity
    private val al: ALlistener
    var dgl: DemoGLSurfaceView? = null
    var textureBuffer: ShortBuffer? = null
    var accelX: Float
    var accelY: Float
    var accelZ: Float
    var szAccel: String? = null
    var texID0: Int
    var texID1: Int
    var texID2: Int
    var texID3: Int
    private var gl: GL10?
    var textures: IntBuffer = IntBuffer.allocate(4)
    fun onTimer() {
        acti.UserToast(con, "Rendrer linked")
    }

    init {
        this.al = al
        con = context
        this.acti = acti
        accelX = 0f
        accelY = 0f
        accelZ = 0f
        texID0 = 0
        texID1 = 0
        texID2 = 0
        texID3 = 0
        gl = null
        AllSet = false


        //    acti.UserMsg(con, con.getFilesDir().getAbsolutePath());
    }

    // Scale accel values to Angle
    // x10 to give resolution of 0.1 Degree
    // accelX = 123 means angle of 12.3
    fun SetAccel(x: Float, y: Float, z: Float) {

        //GOOD FOR ZTILT ONLY
        val decimalplaces = 1
        accelX = (accelX + (10 * decimalplaces * 10 * x).toInt()) / 2
        accelY = (accelY + (10 * decimalplaces * 10 * y).toInt()) / 2
        accelZ = (accelZ + (10 * decimalplaces * 10 * z).toInt()) / 2

        //FOR NOW PASS ACTUALVALUES x 100 as integer
        //
        accelX = x * 100
        accelY = y * 100
        accelZ = z * 100
    }

    override fun onSurfaceCreated(gl: GL10, config: EGLConfig) {
        this.gl = gl
        nativeInit(con.getFilesDir().getAbsolutePath())
    }

    override fun onSurfaceChanged(gl: GL10, w: Int, h: Int) {
        nativeResize(w, h)
    }

    override fun onDrawFrame(gl: GL10) {
        nativeRender(accelX.toInt(), accelY.toInt(), accelZ.toInt())
    }

    companion object {
        var AllSet: Boolean
        private external fun nativeInit(respath: String)
        private external fun nativeResize(w: Int, h: Int)
        private external fun nativeRender(ax100: Int, ay100: Int, az100: Int)
        private external fun nativeDone()
    }
}

class MainActivity : CppListener, ComponentActivity() {

    companion object {
        @JvmStatic
        fun staticMethod(int: Int, floaf: Float, string: String) = int
        //i.e public final staticMethod(IFLjava/lang/String;)I

        init {
            System.loadLibrary("algesdk")
        }
    }

    override fun onIntegerSet(key: String, value: Int) : String {
        var needed : String = post_need;
        post_need = "";
        return needed;
    }

    fun iceResult(ep: String, value: String) {
        lateinit var user_loc : String;
        if (ep.endsWith("Loc")) user_loc = value;
        if (ep.endsWith("Loc")) user_loc = value;
    }

    override fun onStringSet(key: String, value: String) {
        lateinit var intent : Intent

        if (key=="start") {
            //     if (value=="Login") { intent = Intent(this, LoginActivity::class.java) }
            //      if (value=="Manage") { intent = Intent(this, Manage::class.java) }
            //     if (value=="Welcome") { intent = Intent(this, Welcome::class.java) }
            //if (value=="Order") { intent = Intent(this, Welcome::class.java) }
       //     startActivity(intent)
        }

        if (key.startsWith("ice")) {
            var keey = key.substring(24);
            var valu :String = value;
            iceResult(keey,valu);
        }

    }

    fun navigateTo(page: String) {
//        cOnEvent(100, page);//s = start //NotifyCpp that we are moving to nexe page
        onStringSet("start", page)
    }


    private val mContext: Context? = null
    private val milli100: Timer? = null

    private class TT internal constructor(a: MainActivity) : TimerTask() {
        private val da: BaseActivity

        init {
            da = a
        }

        fun run() {
            (da.mGLView as DemoGLSurfaceView).onTimer()
        }
    }

    fun ReadAsset(mContext: Context, fname: String?) {
        try {
            val i: InputStream = mContext.getAssets().open(fname)
        } catch (e: IOException) {
            // TODO Auto-generated catch block
            e.printStackTrace()
        }
    }

/*
    extern void appInit(char*);
    extern void appSize(int,int,int);
    extern void appDeinit(void);
    extern void appAccelerometerSz(char*);
    //extern void appRender(int accelX, int accelY, int accelZ);
    extern void	appRender(float tick, int width, int height, int accelX, int accelY, int accelZ);
    extern int appPull(void);
    extern void appPushI(int,int,int);
    extern char* appSzlastP1(void);
    extern int appIntlastP1(void);
    extern int appIntlastP2(void);
    extern void* appP1(void);
    extern void* appP2(void);
    extern bool LoadTGA2(void*,void*);
 */

    external fun appInit(path: String);
    external fun appDeinit();
    external fun appRender(tick: Float , width: Int, height: Int, accelX: Int, accelY: Int, accelZ: Int);
    external fun appPull() : Int;
    external fun appPushI(cmd: Int, i1: Int,i2: Int);

  //      external fun goNative(n:Long) : Long
  //      external fun cOnCreate()
  //      external fun cOnEvent(eventId: Short, string: String)
  //      external fun cGetVar(key: String) : String
  //Transfer All Assets on Application Data Directory
  open fun xfer() : MutableList<String> {
      val xok: MutableList<String> = mutableListOf()
      var all: String? = null
      // Open resource tagged as resid
      try {
          val ass = assets.list("")
          all = String()
          val b = ByteArray(15 * 1024 * 1024)
          var curr : String = "";
          for (i in ass!!.indices) {
              if (ass[i].indexOf(".") == -1) continue
              val f_out: String = getFilesDir().getAbsolutePath() + "/" + ass[i]
              curr = f_out;
              val fo: FileOutputStream = baseContext.openFileOutput(ass[i], MODE_PRIVATE)
              var count : Int = 0;
              try {
                  val fi: InputStream = assets.open(ass[i])
                  count = fi.read(b, 0, 10 * 1024 * 1024)
                  all = """
                    $all
                    ${ass[i]}::$count
                     """.trimIndent()
                  fi.close()
              } catch (e1: Exception) {
                  // TODO Auto-generated catch block

                  e1.printStackTrace()
              }
              if (count >= 5 * 1024 * 1023) {
                  UserToast(ass[i] + " Resource Too Large > 4.9MB")
              } else {
                  fo.write(b, 0, count)
                  xok.add(f_out);
              }

              fo.close()
          }
          //UserToast(mContext, all);
      } catch (e1: Exception) {
          // TODO Auto-generated catch block
          e1.printStackTrace()
      }
      return xok;
  }

    fun UserToast(chars: String?) {
        val a = Toast.makeText(baseContext, chars, Toast.LENGTH_LONG)
        a.show()
    }

    private lateinit var gLView: GLSurfaceView;

    var xferred = false
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        var thefiles = xfer(); xferred = true;
        gLView = DemoGLSurfaceView(this, (this as ALlistener)!!)
        setContentView(gLView);
        appInit("/data/user/0/com.acnodelabs.algeapp/files")


 //      cOnCreate();
        setContent {
            AlgeAppTheme() {
                // A surface container using the 'background' color from the theme
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colors.background
                ) {
                    Greeting("Android")

                }

            }
        }

        post_need = "act:MainActivity";
    }

    fun buttonClicked(view: View?) {
        // need = "start:Login"

        navigateTo("Login");
    }

}

@Composable
fun Greeting(name: String) {
    Text(text = "Hello $name!")
}

@Preview(showBackground = true)
@Composable
fun DefaultPreview() {
    AlgeAppTheme() {
        Greeting("Android")
    }
}